

#Créons une variable pour identifier les clients ayant plus acheté en 2017 qu'en 2016
 
cli_dev<-jardinerie2%>%select(jardinerie2$IDCLIENT,jardinerie2$CA_2017, jardinerie2$CA_2016)

cli_dev<-jardinerie2%>%mutate(dev= case_when( CA_2017>CA_2016 ~ "dev+", TRUE ~ "dev-"))

#Comptons le potentiel de clients 
sum(cli_dev$dev=="dev+")
#10 541
#Comptons le nombre de client à développer
sum(cli_dev$dev=="dev-")
#19 549

cli_dev<-cli_dev%>%mutate(new = case_when (CA_2016==0 & CA_2017>0 ~ "new", TRUE~ "old"))
#new   old 
#7    29993

#Intéressons nous aux clients déjà familiers de l'enseigne en 2016

cli_old<-cli_dev%>%filter(cli_dev$new=="old")%>%select(IDCLIENT, CA_2017, CA_2016, new, dev, VIP)

# Y a t il parmis les anciens clients, des clients achetant plus en 2017 ?
#dev-   dev+ 
# 19459 10534 

#Il serait intéressant de connaitre le profil de ces 10 534 clients qui ont acheté plus en 2017 pour cibler nos actions marketings



#Créons une variable pour identifier les clients fideles à 1 seul magasin ( flag = 1 )

cli_old<-cli_old%>%mutate(fidele1mag = case_when(nb_diff_MAG_2016==1~"1", TRUE~"0"))

# fideleà1mag    plusieurs_mag 
# 25540          4453 

# Afin de normaliser nos données, nous crééons des variable pour identifier le profil d'achat des clients : achat unique, shoppeur, à partir de la variable nb_univers_different_2016

profil_achat<- cli_dev%>%group_by(cli_dev$nb_univers_different_2016)%>%summarize(n(), mean(CA_2016))

# cli_dev.nb_univers_different_2016  n.. mean.CA_2016.
#1                                 1 5401      202.5451
#2                                 2 6888      273.3901
#3                                 3 6125      385.1072
#4                                 4 4423      561.8280
#5                                 5 1912      781.2183
#6                                 6  211     1362.7709
#7                                NA 5040      136.7193


#On remarque sans surprise que les clients achetant dans plusieurs univers dépensent plus. Nous avons 3 catégories: achat unique ( 1 à 3 univers), flaneur ( 4, 5 univers) et shopper (6univers)

cli_dev<-cli_dev%>%mutate(achat_unique = case_when(nb_univers_different_2016==1 |(nb_univers_different_2016==2) | (nb_univers_different_2016==3) ~ "1", TRUE ~ "0"))
cli_dev<-cli_dev%>%mutate(flaneur = case_when(nb_univers_different_2016==4 |(nb_univers_different_2016==5) ~ "1", TRUE ~ "0"))
cli_dev<-cli_dev%>%mutate(shopper = case_when(nb_univers_different_2016==6 ~ "1", TRUE ~ "0"))

#Créons des variables pour discrétiser le CA de 2016 et 2017 afin de pouvoir plus facilement l'analyser
#Afin de créer des intervalles nous faisons une boite à moustache 

boxplot(cli_dev$CA_2016) 

#Intervalle 0-100, 100-200, 200-400, et + de 400
cli_dev<-cli_dev%>%mutate(CA_2016_inf100=case_when(cli_dev$CA_2016<"100" ~ "1", TRUE~"0"))
cli_dev<-cli_dev%>%mutate(CA_2016_100200=case_when(cli_dev$CA_2016>"100" & cli_dev$CA_2016<"200" ~ "1", TRUE~"0"))
cli_dev<-cli_dev%>%mutate(CA_2016_200400=case_when(cli_dev$CA_2016>"200"& cli_dev$CA_2016<"400" ~ "1", TRUE~"0"))

cli_dev<-cli_dev%>%mutate(CA_2016_sup400=case_when(cli_dev$CA_2016>"400" ~ "1", TRUE~"0"))

=== Analyse Uni et Bi variée

setwd("C:/Users/Alex/Desktop/MBA BIG DATA/Semestre 2/")

install.packages(c("readr", "dplyr"))
library(dplyr)
library(readr)

e <- read.csv2("C:/Users/Alex/Desktop/MBA BIG DATA/Semestre 2/examen R/base.csv", encoding="UTF-8", sep=";")

library(questionr)
plot(e$prix_ticket_moy_2016, e$age_an)

str(e)


#âºAnalyse univariÃ©e
summary(e)


#Age/CA


hist(e$age_an, col = "red", border = "white",
     main = paste("Ages des", nrow(e), "clients"),
     xlab = "Age[annees]", ylab = "Effectifs",
     xlim = c(20,90),
     labels = TRUE)

# Analyse des variables Age, %montant univers

# ===== Analyse bivariée =====
#Age/CA
plot(e$CA_2016, e$age_an)
plot(e$CA_2016, e$age_an, pch = 20, col = rgb(1,0,0,0.1))


# Heure moy d'achat/ CA'
plot(e$CA_2016, e$h_mean_2016)
plot(e$CA_2016, e$h_mean_2016, pch = 20, col = rgb(1,0,0,0.1))

# CA/ nbre de ticket
plot(e$CA_2016, e$nbtic_2016)
plot(e$CA_2016, e$nbtic2016, pch = 20, col = rgb(1,0,0,0.1))



# ==== Regression


barplot(prop.table(table(e$VIP)))
table(e$VIP)
prop.table(table(e$VIP))


# Regression logistique binaire
# Conversion de dev en boléen
j2$dev <- FALSE
j2$dev[j2$dev =="1"] <- TRUE 

e_reg <- glm(dev ~ h_mean_2016_QL + prix_ticket_moy_2016 + nbtic_2016, data=j2, family = binomial(logit))


j2$flaneur <- FALSE
j2$flaneur[j2$flaneur =="1"] <- TRUE 
e_reg2 <- glm(flaneur ~ h_mean_2016_QL + prix_ticket_moy_2016 + nbtic_2016, data=j2, family = binomial(logit))
e_reg2

j2$VIP <- FALSE
j2$VIP[j2$VIP =="1"] <- TRUE 

e_reg3 <- glm(VIP ~ h_mean_2016_QL + prix_ticket_moy_2016 + nbtic_2016, data=j2, family = binomial(logit))
e_reg3

summary(e_reg3)


# Regression logistique recherche
# creation de la formule
formule <- y ~ nbtic_2016 + flaneur + new + nb_mois_diff_2016 + MAGASIN + VIP + DATEDEBADH_mois + prix_ticket_moy_2016 + shopper + achat_unique + age_QL + dev + h_mean_2016_QL
# creation de la table à analyser
liste_var = c("nbtic_2016", "flaneur", "new", "nb_mois_diff_2016", "MAGASIN", "VIP", "DATEDEBADH_mois", "prix_ticket_moy_2016", "shopper", "achat_unique", "age_QL", "dev", "h_mean_2016_QL")

table_a = e[,liste_var]
# Logique d'AIC

logit <- glm(VIP~1,data=j2,family=binomial(link = "logit"))
summary(logit)

# echantillon d'apprentissage et validation (350 lignes)

cles <- read.csv("C:/Users/Alex/Desktop/MBA BIG DATA/Semestre 2/examen R/cles2.csv", quote="", header=TRUE, encoding="UTF-8", sep=";")

train <- j2[cles$test,]
valid <- j2[-cles$test,]

# recherche maximale ascendante
selection <- step(logit,direction="forward",trace=TRUE,k = log(nrow(train)),
                  scope=list(upper=formule))

selection
summary(selection)

# recherche moins restrictive
selection <- step(logit,direction="forward",trace=TRUE,k=2, scope=list(upper=formule))

summary(selection)

train$ascaic <- predict(selection, newdata=train, type="response")
valid$ascaic <- predict(selection, newdata=valid, type="response")



pred <- prediction(train$ascaic,train$Cible,label.ordering=c(0,1))
performance(pred,"auc")@y.values[[1]]
pred <- prediction(valid$ascaic,valid$Cible,label.ordering=c(0,1))
performance(pred,"auc")@y.values[[1]]
